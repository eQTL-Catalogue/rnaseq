/*
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {

  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  // errorStrategy = { task.exitStatus in [1,143,137,104,134,139,255] ? 'retry' : 'terminate' }
  errorStrategy = { task.exitStatus in [1] ? 'terminate' : 'retry' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  withName: 'align_reads:trim_galore' {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: 'align_reads:hisat2Align' {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: 'align_reads:hisat2_sortOutput' {
    cpus = 4
    memory = { 128.GB * task.attempt }
    time = { 8.h * task.attempt }
  }
  withName: 'align_reads:sort_by_name_BAM' {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 24.GB * task.attempt, 'memory' ) }
    time = {check_max(4.h * task.attempt, 'time')}
  }
  withName: 'align_reads:makeHISATindex' {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 100.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }

  withName: 'count_features:featureCounts' {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName: 'count_features:merge_featureCounts' {
    cpus = 1
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: 'quant_exons:makeDexSeqExonGFF' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName: 'quant_exons:count_exons' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName: 'quant_exons:exon_count_merge' {
    cpus = 1
    memory = { check_max( 128.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: 'quant_tx:salmonQuant:makeSalmonIndex' {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName: 'quant_tx:salmonQuant:salmon_quant' {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName: 'quant_tx:salmonQuant:salmon_merge' {
    cpus = 1
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 36.h * task.attempt, 'time' ) }
  }

  withName: 'quant_txrev:salmonQuant:makeSalmonIndex' {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName: 'quant_txrev:salmonQuant:salmon_quant' {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 24.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: 'quant_txrev:salmonQuant:salmon_merge' {
    cpus = 1
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 36.h * task.attempt, 'time' ) }
  }
  withName: 'quant_txrev:gff_to_fasta' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }

  withName: 'generate_mbv:run_mbv' {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }


  withName: 'quant_leafcutter:bam_to_junc' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName: 'quant_leafcutter:cluster_introns' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 24.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withName: 'createBigWig' {
    cpus = { check_max( 16, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 30.m * task.attempt, 'time' ) }
  }

  withName: 'sample_correlation' {
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  // withName:multiqc {
  //   memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  //   errorStrategy = 'ignore'
  // }
  // withName:get_software_versions {
  //   memory = { check_max( 2.GB, 'memory' ) }
  //   cache = false
  //   errorStrategy = 'ignore'
  // }
  // withName:workflow_summary_mqc {
  //   cpus = { check_max (1, 'cpus') }
  //   memory = { check_max( 2.GB, 'memory' ) }
  //   cache = false
  //   executor = 'local'
  //   errorStrategy = 'ignore'
  // }
}

